akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  log-dead-letters = off
}

akka.cluster.seed-nodes = [
  "akka://khipu@127.0.0.1:25520"
]

akka {
  actor.provider = "cluster"

  remote {
    #enabled-transports = ["akka.remote.netty.tcp"]
    #netty.tcp {
    #  hostname = "127.0.0.1"
    #  port = 2552
    #}

    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 25520
    }
    # Settings for the failure detector to monitor connections.
    # For TCP it is not important to have fast failure detection, since
    # most connection failures are captured by TCP itself.
    # The default DeadlineFailureDetector will trigger if there are no heartbeats within
    # the duration heartbeat-interval + acceptable-heartbeat-pause, i.e. 20 seconds
    # with the default settings.
    transport-failure-detector {
      # How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 100 s   # default 4s
      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # A margin to the `heartbeat-interval` is important to be able to survive sudden,
      # occasional, pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      acceptable-heartbeat-pause = 250 s  # default 10s
    }
    retry-gate-closed-for = 2 s  # default 5s
  }
  cluster {
    metrics.enabled = off
    failure-detector {
      acceptable-heartbeat-pause = 6 s # default 3 s
      threshold = 12.0    # default 8.0
    }
    scheduler {
      # make it less than system's tick-duration to force start a new one
      tick-duration = 9 ms # default 33ms
      ticks-per-wheel = 512 # default 512
    }
    use-dispatcher = cluster-dispatcher
  }

  cluster.pub-sub.gossip-interval = 3 s  # default 1s
}

akka.cluster.auto-down-unreachable-after = off

cluster-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}

khipu-sync-pinned-dispatcher {
  executor = "thread-pool-executor"
  type = PinnedDispatcher
}

khipu-persistence-pinned-dispatcher {
  executor = "thread-pool-executor"
  type = PinnedDispatcher
}

khipu-txprocess-affinity-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "affinity-pool-executor"
  # Configuration for the thread pool
  affinity-pool-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 8
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 4
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 1000 
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

###########################################
# akka-http-caching Reference Config File #
###########################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

khipu.caching {
  # Default configuration values for LfuCache
  lfu-cache {
    # Maximum number of entries the cache may store.
    # After the maximum capacity is reached the cache evicts entries that are
    # less likely to be used again. For example, the cache may evict an entry
    # because it hasn't been used recently or very often.
    max-capacity = 512

    # Minimum total size for the internal data structures.
    initial-capacity = 16

    # Upper limit to the time period an entry is allowed to remain in the cache.
    # Set to 'infinite' to disable eviction based on time of write (create or update).
    time-to-live = infinite

    # Maximum time period an entry is allowed to remain in the cache after last access.
    # Access time is reset by all cache read and write operations.
    # Set to 'infinite' to disable time-based expiration.
    time-to-idle = infinite
  }
}

khipu.service-board {
  # Actor name of the extention actor, /user/khipuService
  name = "khipuService"

  # Start the service on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""
}

khipu.entity {
  node.inactive = 3600
}

khipu.db {
}

khipu.cache {
  cache-size = 5000000 # < 4G heap
  #cache-size = 10000000 # < 7G heap
}

khipu.kafka {
  # configs without default value
  bootstrap.servers = "localhost:9092"

  key.serializer = "org.apache.kafka.common.serialization.ByteArraySerializer"
  value.serializer = "org.apache.kafka.common.serialization.ByteArraySerializer"
  request.required.acks = 0

  key.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
  value.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
  auto.offset.reset = "earliest"
  check.crcs = false
  fetch.min.bytes = 100000
}

